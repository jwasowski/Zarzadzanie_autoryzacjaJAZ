package services;

import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import domain.User;
import mapper.ResultSetMapper;
import servlets.UserLevel;

public class StartUpRoutine {

	protected static void setUpDb() throws IOException {
		Connection connection = null;
		Statement createTable = null;
		ResultSet rs = null;
		try {
			connection = DriverManager.getConnection(CommonMethods.url());
			createTable = connection.createStatement();
			rs = connection.getMetaData().getTables(null, null, null, null);
			boolean tableExists = false;
			while (rs.next()) {
				if (rs.getString("TABLE_NAME").equalsIgnoreCase("USERS")) {
					tableExists = true;
					break;
				}
			}
			if (!tableExists) {
				createTable.executeUpdate(createTableSql());
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			try {
				closeResourceSetUpDb(connection, createTable, rs);
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}

	}

	protected static void setUpAdmin() throws IOException {
		ResultSetMapper mapper = new ResultSetMapper();
		PreparedStatement insert;
		PreparedStatement selectCheckUser;
		Connection connection = null;
		Statement checkUser = null, insertIntoDb = null;
		ResultSet rs = null;
		try {
			connection = DriverManager.getConnection(CommonMethods.url());
			checkUser = connection.createStatement();
			selectCheckUser = connection.prepareStatement(selectCheckUserSql());
			selectCheckUser.setString(1, "admin");

			List<User> result = new ArrayList<User>();
			rs = selectCheckUser.executeQuery();
			while (rs.next()) {
				result.add(mapper.map(rs));
			}
			if (result.isEmpty()) {
				insertIntoDb = connection.createStatement();
				insert = connection.prepareStatement(insertSql());
				insert.setString(1, "admin");
				insert.setString(2, "admin");
				insert.setString(3, "admin@admin.pl");
				insert.setString(4, UserLevel.ADMIN.toString());
				insert.executeUpdate();

			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			try {
				closeResourceSetUpAdmin(connection, checkUser, insertIntoDb, rs);
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
	}

	private static void closeResourceSetUpAdmin(Connection con, Statement statementA, Statement statementB,
			ResultSet rs) throws SQLException {
		if (con != null)
			con.close();
		if (statementA != null)
			statementA.close();
		if (statementB != null)
			statementB.close();
		if (rs != null)
			rs.close();
	}

	private static void closeResourceSetUpDb(Connection con, Statement statementA, ResultSet rs) throws SQLException {
		if (con != null)
			con.close();
		if (statementA != null)
			statementA.close();
		if (rs != null)
			rs.close();
	}

	private static String createTableSql() {
		return "CREATE TABLE USERS (" + "ID INT GENERATED BY DEFAULT AS IDENTITY," + " USERNAME VARCHAR(30),"
				+ " PASSWORD VARCHAR(15)," + "EMAIL VARCHAR(120)," + " LEVEL VARCHAR(8)," + " PRIMARY KEY (ID))";
	}

	private static String insertSql() {
		return "INSERT INTO USERS (USERNAME, PASSWORD, EMAIL, LEVEL) VALUES (?,?,?,?)";
	}
	
	private static String selectCheckUserSql(){
		return "SELECT * FROM USERS WHERE USERNAME=?";
	}
}
