package services;

import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import domain.User;
import mapper.ResultSetMapper;
import servlets.UserLevel;

public class StartUpRoutine {

	protected static void setUpDb()
			throws IOException{

		String url = "jdbc:hsqldb:hsql://localhost/workdb";
		String createTableSql = "CREATE TABLE USERS (" + "ID INT GENERATED BY DEFAULT AS IDENTITY,"
				+ " USERNAME VARCHAR(30)," + " PASSWORD VARCHAR(15)," + "EMAIL VARCHAR(120)," + " LEVEL VARCHAR(8),"
				+ " PRIMARY KEY (ID))";

		try {
			Connection connection = DriverManager.getConnection(url);
			Statement createTable = connection.createStatement();
			ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
			boolean tableExists = false;
			while (rs.next()) {
				if (rs.getString("TABLE_NAME").equalsIgnoreCase("USERS")) {
					tableExists = true;
					break;
				}
			}
			if (!tableExists) {
				createTable.executeUpdate(createTableSql);
			}
			createTable.close();
			connection.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}

	}
	protected static void setUpAdmin()
			throws IOException{
		String insertSql = "INSERT INTO USERS (USERNAME, PASSWORD, EMAIL, LEVEL) VALUES (?,?,?,?)";
		String selectCheckUserSql = "SELECT * FROM USERS WHERE USERNAME=?";
		ResultSetMapper mapper = new ResultSetMapper();
		String url = "jdbc:hsqldb:hsql://localhost/workdb";
		PreparedStatement insert;
		PreparedStatement selectCheckUser;
		try {
			Connection connection = DriverManager.getConnection(url);
			Statement checkUser = connection.createStatement();
			selectCheckUser = connection.prepareStatement(selectCheckUserSql);
			selectCheckUser.setString(1, "admin");

			List<User> result = new ArrayList<User>();
			ResultSet rs = selectCheckUser.executeQuery();
			while (rs.next()) {
				result.add(mapper.map(rs));
			}
			
			checkUser.close();
			if (result.isEmpty()) {
		Statement insertIntoDb = connection.createStatement();
		insert = connection.prepareStatement(insertSql);
		insert.setString(1, "admin");
		insert.setString(2, "admin");
		insert.setString(3, "admin@admin.pl");
		insert.setString(4, UserLevel.ADMIN.toString());
		insert.executeUpdate();
		connection.close();
		insertIntoDb.close();
	}}
		catch (SQLException e) {
			e.printStackTrace();
		}
	}

}
